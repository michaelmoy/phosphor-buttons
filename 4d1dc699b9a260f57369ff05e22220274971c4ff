{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0d295b16_52fa8ad0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001093
      },
      "writtenOn": "2022-01-19T16:55:38Z",
      "side": 1,
      "message": "moved the common init() implementation into the base buttonIface class.\nsimilar to init added  deinit() method which does the button iface IO deinitialization",
      "revId": "4d1dc699b9a260f57369ff05e22220274971c4ff",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ce7e862_e72e8c4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T19:40:55Z",
      "side": 1,
      "message": "There are a number of \"unresolved\" issues but I think you\u0027ve taken care of them.  Can you go confirm they are \"Done\" and mark them as such?",
      "revId": "4d1dc699b9a260f57369ff05e22220274971c4ff",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00517f28_b7bb91ba",
        "filename": "inc/button_interface.hpp",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T19:40:55Z",
      "side": 1,
      "message": "This likely caused problems you aren\u0027t aware of.\n\nWhen being destructed classes are of the type that the destructor is, including the vtable look-ups.  That means that \u0027ButtonIface::deInit\u0027 is going to be called for every class even if it overrides with its own deInit function.\n\nYou\u0027re going to need each destructor to call deInit directly rather than using \u0027\u003d default\u0027 on all the destructors.  You may want to have some kind of member variable here that identifies if deInit has been called and assert in this destructor if it hasn\u0027t been called by the time we get here.",
      "revId": "4d1dc699b9a260f57369ff05e22220274971c4ff",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4987b507_0d992c9f",
        "filename": "inc/button_interface.hpp",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 1001093
      },
      "writtenOn": "2022-01-24T18:29:00Z",
      "side": 1,
      "message": "I have moved deinit() method to individual destructors.does the check that \"assert  deinit is not called\" in base constructor additionally needed or this is fine?. Also to maintain uniformity i have also moved init calls to individual constructors is this fine?",
      "parentUuid": "00517f28_b7bb91ba",
      "revId": "4d1dc699b9a260f57369ff05e22220274971c4ff",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3469265a_87b2f21d",
        "filename": "inc/button_interface.hpp",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T19:40:55Z",
      "side": 1,
      "message": "Ideally we\u0027d make init/deInit \"protected:\" now.  I think you only want them called from the constructor/destructor.",
      "revId": "4d1dc699b9a260f57369ff05e22220274971c4ff",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c5406f3_a6804d47",
        "filename": "inc/button_interface.hpp",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1001093
      },
      "writtenOn": "2022-01-24T18:29:00Z",
      "side": 1,
      "message": "this is not needed since now the init and deInit are called in derived class",
      "parentUuid": "3469265a_87b2f21d",
      "revId": "4d1dc699b9a260f57369ff05e22220274971c4ff",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e236d72_50c71e67",
        "filename": "inc/button_interface.hpp",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-24T22:38:35Z",
      "side": 1,
      "message": "Don\u0027t you still want the function \u0027protected\u0027 though?  You don\u0027t want external users to call \u0027init\u0027 or \u0027deInit\u0027.  You only want derived classes to call them... so it should be protected with \u0027protected\u0027.",
      "parentUuid": "2c5406f3_a6804d47",
      "revId": "4d1dc699b9a260f57369ff05e22220274971c4ff",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5efd5e78_7ad6f004",
        "filename": "inc/button_interface.hpp",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1001093
      },
      "writtenOn": "2022-01-31T06:32:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e236d72_50c71e67",
      "revId": "4d1dc699b9a260f57369ff05e22220274971c4ff",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}