#pragma once

#include <algorithm>
#include <array>
#include <chrono>
#include <cstring>
#include <string_view>

constexpr inline auto POWER_DBUS_OBJECT_NAME =
    "/xyz/openbmc_project/Chassis/Buttons/Power0";
constexpr inline auto RESET_DBUS_OBJECT_NAME =
    "/xyz/openbmc_project/Chassis/Buttons/Reset0";
constexpr inline auto ID_DBUS_OBJECT_NAME =
    "/xyz/openbmc_project/Chassis/Buttons/ID0";
constexpr inline auto HS_DBUS_OBJECT_NAME =
    "/xyz/openbmc_project/Chassis/Buttons/HostSelector";
constexpr inline auto DBG_HS_DBUS_OBJECT_NAME =
    "/xyz/openbmc_project/Chassis/Buttons/DebugHostSelector";
constexpr inline auto SERIAL_CONSOLE_MUX_DBUS_OBJECT_NAME =
    "/xyz/openbmc_project/Chassis/Buttons/SerialUartMux";

constexpr inline auto CHASSIS_STATE_OBJECT_NAME =
    "/xyz/openbmc_project/state/chassis";
constexpr inline auto CHASSISSYSTEM_STATE_OBJECT_NAME =
    "/xyz/openbmc_project/state/chassis_system";
constexpr inline auto HOST_STATE_OBJECT_NAME =
    "/xyz/openbmc_project/state/host";

constexpr inline auto GPIO_BASE_LABEL_NAME = "1e780000.gpio";
constexpr inline auto gpioDefFile = "/etc/default/obmc/gpio/gpio_defs.json";
#define LOOKUP_GPIO_BASE @LOOKUP_GPIO_BASE@

constexpr inline auto POWER_BUTTON_PROFILE = @POWER_BUTTON_PROFILE@;
constexpr inline auto ID_LED_GROUP = @ID_LED_GROUP@;
constexpr inline const auto LONG_PRESS_TIME_MS =
    std::chrono::milliseconds(@LONG_PRESS_TIME_MS@);

constexpr inline const char INSTANCES[] = @INSTANCES@;
constexpr inline auto INSTANCES_SIZE = sizeof(INSTANCES);
constexpr inline auto INSTANCE_COUNT =
    std::ranges::count(INSTANCES, ' ') + 1;

consteval std::array<std::string_view, INSTANCE_COUNT> parse_instances()
{
    std::array<std::string_view, INSTANCE_COUNT> instances;
    std::size_t start_pos = 0;
    std::size_t index = 0;

    while (start_pos < INSTANCES_SIZE && index < INSTANCE_COUNT)
    {
        const auto end_pos = std::min(INSTANCES_SIZE, start_pos + std::strcspn(INSTANCES + start_pos, " "));
        const auto value_str = std::string_view(INSTANCES + start_pos, end_pos - start_pos);
        instances[index++] = value_str;
        start_pos = end_pos + 1;
    }

    return instances;
}

constexpr inline static const auto instances = parse_instances();
